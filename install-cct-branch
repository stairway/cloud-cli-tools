#!/usr/bin/env sh

# git clone git@github.com:${GITHUB_REPO}.git && cd ${PROJECT_NAME} && bin/build.sh -F && sh -c "$(cat bin/run.sh)"
# mkdir "${PROJECT_NAME}" && curl -sL -H 'Authorization: token $PAT' -o- 'https://github.com/${GITHUB_REPO}/archive/refs/heads/multi.tar.gz' | tar -xz -C "${PROJECT_NAME}" --strip-components=1

# Set strict error checking
set -euf
LC_CTYPE=C

# Enable debug output if $DEBUG is set to true
[ "${DEBUG:="false"}" = "true" ] && set -x

if [ -f "$0" ]; then
    SCRIPT_DIR="$(dirname $( cd "$( dirname "$0" )" && pwd ))"
else
    SCRIPT_DIR="$(pwd)"
fi

# Optional vars
PROJECT_NAME="${PROJECT_NAME:-"cloud-cli-tools"}"
APP_NAME="${APP_NAME:="cloudcli"}"
GITHUB_REPO="${GITHUB_REPO:="stairway/cloud-cli-tools"}"
TARGET_DIR="${TARGET_DIR:="${SCRIPT_DIR}"}"
TARGET_ARCH="${TARGET_ARCH:="$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/')"}"
TARGET_OS="${TARGET_OS:="$(uname -s | tr '[:upper:]' '[:lower:]')"}"
REQUIRED_BINARIES=${REQUIRED_BINARIES:='tar curl docker jq'}
SKIP_DOWNLOAD=${SKIP_DOWNLOAD:-false}
DOWNLOAD_DIR="${TARGET_DIR}/${PROJECT_NAME}"
CCT_ADDON_SOURCE_DIR="${CCT_ADDON_SOURCE_DIR-.}"
CCT_ADDON_TARGET_DIR="${CCT_ADDON_TARGET_DIR:-${PROJECT_NAME}/mount/addons}"

if [ -z "$GH_PAT" ]; then
    printf "Github Personal Access Token (press Enter for none)\n"
    read -s PAT
fi
PAT="${PAT:-$GH_PAT}"

# Print error and exit
fail() {
    printf "\033[91;1m[ERROR]\033[0m\033[91m %s (Exiting)\033[0m\n" "$*"
    exit 1
}

# Check if we have all the dependencies
check_binaries() {
    for bin in ${REQUIRED_BINARIES}; do
        [ -x "$(command -v "${bin}")" ] || fail "Required dependency ${bin} not found in path"
    done
}

download_asset() {
    local download_url="${1}"
    if [ ! -w "${TARGET_DIR}" ]; then
        [ -w "${TARGET_DIR}" ] || fail "Target directory (${TARGET_DIR}) is not writable (destination can be changed using \$TARGET_DIR variable)"
    fi
    printf "\033[93m>\033[0m Download URI '%s'\n" "${download_url}"
    curl_command="curl -sL";
    [ -n "${PAT}" ] && curl_command="${curl_command} -H 'Authorization: token $PAT'"
    curl_command="${curl_command} -o- '${download_url}'"
    [ -d "${DOWNLOAD_DIR}" ] || mkdir "${DOWNLOAD_DIR}"
    [ "${SKIP_DOWNLOAD}" = "true" ] || \
        eval "$curl_command" \
                | tar -xz -C "${DOWNLOAD_DIR}" --strip-components=1
}

download_version() {
    local branch="${1}"
    local download_url="https://github.com/${GITHUB_REPO}/archive/refs/heads/${branch}.tar.gz"
    
    download_asset "${download_url}"
}

check_binaries

printf "\033[92;1m>>>\033[94;1m %s: %s\033[92;1m <<<\033[0m\n" "${PROJECT_NAME}" "Installation Script"

printf "\033[93m>\033[0m Determinig system type ...\n"
while getopts "hd:a:o:n" OPTION
do
    case $OPTION in
        h) usage; exit;;
        d) TARGET_DIR="$OPTARG";;
        a) TARGET_ARCH="$OPTARG";;
        o) TARGET_OS="$OPTARG";;
        n) TARGET_NIGHTLY=true ;;
        ?) usage; exit;;
    esac
done
printf "\033[93m>\033[0m Detected: %s (%s)\n" "${TARGET_ARCH}" "${TARGET_OS}"

branch_name=multi

printf "\033[93m>\033[0m Downloading %s (%s) ...\n" "${PROJECT_NAME}" "${branch_name}"
download_version "${branch_name}" || fail "There was a problem."

printf "\033[93m>\033[0;1m\033[92;1m Done! %s was downloaded to '\033[3m%s\033[0m'\n" "${PROJECT_NAME}" "${DOWNLOAD_DIR}"

if [ ! -d "${CCT_ADDON_TARGET_DIR}" ]; then
    printf "\033[93m>\033[0m Creating '%s' ...\n" "${CCT_ADDON_TARGET_DIR}/"
    mkdir -p "${CCT_ADDON_TARGET_DIR}"
fi

printf "\033[93m>\033[0m Copying addons to '%s' ...\n" "${CCT_ADDON_TARGET_DIR}/"
for f in $(find "${CCT_ADDON_SOURCE_DIR}" -type f -name '*.zip' -mindepth 1 -print); do
    cp "$f" "${CCT_ADDON_TARGET_DIR}/"
done
