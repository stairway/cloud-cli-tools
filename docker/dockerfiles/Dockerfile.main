# syntax=docker/dockerfile:1
ARG VERSION=base-latest
ARG IMAGE_BASE_NAME=
FROM ${IMAGE_BASE_NAME}:${VERSION}
LABEL org.opencontainers.image.authors="Andrew Haller <andrew.haller@liatrio.com>"

ARG KUBE_VERSION=latest
ARG ISTIO_VERSION=latest
ARG HASHICORP_VAULT_VERSION=latest
ARG TERRAFORM_VERSION=latest
ARG TERRAGRUNT_VERSION=latest
ARG HELM_VERSION=latest

ARG KUBE_PS1_VERSION=v0.8.0

ENV KEEP_ALIVE=false

# https://yaml.org/type/bool.html
ENV TRUE='y|Y|yes|Yes|YES|true|True|TRUE|on|On|ON|1'
ENV FALSE='n|N|no|No|NO|false|False|FALSE|off|Off|OFF|0'
ENV BOOL="${TRUE}|${FALSE}"

ENV USER="${USER:-root}"
ENV HOME="${HOME:-/root}"
ENV PATH="/opt/bin:${PATH}"

USER root
WORKDIR /tmp/downloads

COPY docs/* /docs/
COPY opt/* /opt/bin/
COPY bin/* /usr/local/bin/

COPY profile/* $HOME/.local/profile.d/
COPY conf $HOME/.conf

ADD addons/**/*.tgz /tmp/addons/

RUN for f in $(ls -1 /tmp/addons); do install "/tmp/addons/${f}" "/usr/local/bin/${f}"; done && \
    rm -rf /tmp/addons && \
    chmod +x /opt/bin/describe && \
    mkdir -p $HOME/.local/shell_addons.d

# https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-kubectl-binary-with-curl-on-linux
RUN [ "${KUBE_VERSION:-latest}" = "latest" ] && \
        version=$(curl -L -s https://dl.k8s.io/release/stable.txt) || \
        version="v$(echo ${KUBE_VERSION} | sed s/^v//g)" && \
    status=$(./verify-checksum-method2.sh \
        "https://dl.k8s.io/release/${version}/bin/linux/amd64/kubectl" \
        "kubectl" \
        "https://dl.k8s.io/${version}/bin/linux/amd64/kubectl.sha256" \
        "kubectl.sha256") && \
    echo $status && \
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && \
    printf "Kubernetes %s\n" "$(kubectl version --short --client)" >> /.versions

# # https://helm.sh/docs/intro/install/
RUN [ "${HELM_VERSION:-latest}" = "latest" ] && \
        HELM_VERSION=$(./gh-get-latest-release.sh "helm/helm") || \
        HELM_VERSION="v$(echo ${HELM_VERSION} | sed s/^v//g)" && \
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
    chmod 700 get_helm.sh && \
    ./get_helm.sh --version ${HELM_VERSION} && \
    printf "Helm %s\n" "$(helm version --short)" >> /.versions

RUN [ "${KUBECTL_CONVERT_VERSION:-latest}" = "latest" ] && \
        version=$(curl -L -s https://dl.k8s.io/release/stable.txt) || \
        version="v$(echo ${KUBECTL_CONVERT_VERSION} | sed s/^v//g)" && \
    status=$(./verify-checksum-method2.sh \
        "https://dl.k8s.io/release/${version}/bin/linux/amd64/kubectl-convert" \
        "kubectl-convert" \
        "https://dl.k8s.io/${version}/bin/linux/amd64/kubectl-convert.sha256" \
        "kubectl-convert-${version}.sha256") && \
    echo $status && \
    install -o root -g root -m 0755 kubectl-convert /usr/local/bin/kubectl-convert

# # https://kind.sigs.k8s.io/
RUN version=$(./gh-get-version.sh "${KIND_VERSION}" "latest" "kubernetes-sigs/kind") && \
    status=$(./verify-checksum-method1.sh \
        "https://kind.sigs.k8s.io/dl/${version}/kind-linux-amd64" \
        "kind-linux-amd64" \
        "https://kind.sigs.k8s.io/dl/${version}/kind-linux-amd64.sha256sum" \
        "kind-linux-amd64.sha256sum") && \
    echo $status && \
    install kind-linux-amd64 /usr/local/bin/kind && \
    kind --version >> /.versions

# # https://github.com/doitintl/kube-no-trouble
RUN curl -sSL https://git.io/install-kubent | sh -

# # Install kubectx and kubens
# # https://github.com/ahmetb/kubectx/blob/master/README.md#manual-installation-macos-and-linux
RUN version=$(./gh-get-version.sh "${KUBECTX_VERSION}" "latest" "ahmetb/kubectx") && \
    status=$(./verify-checksum-method1.sh \
        "https://github.com/ahmetb/kubectx/releases/download/${version}/kubectx_${version}_linux_x86_64.tar.gz" \
        "kubectx_${version}_linux_x86_64.tar.gz" \
        "https://github.com/ahmetb/kubectx/releases/download/${version}/checksums.txt" \
        "kubectx-${version}.sha256") && \
    echo $status && \
    tar -xvzf kubectx_${version}_linux_x86_64.tar.gz && \
    install kubectx /usr/local/bin/kubectx && \
    printf "kubectx: %s\n" "$(kubectx --version)" >> /.versions

RUN version=$(./gh-get-version.sh "${KUBECTX_VERSION}" "latest" "ahmetb/kubectx") && \
    status=$(./verify-checksum-method1.sh \
        "https://github.com/ahmetb/kubectx/releases/download/${version}/kubens_${version}_linux_x86_64.tar.gz" \
        "kubens_${version}_linux_x86_64.tar.gz" \
        "https://github.com/ahmetb/kubectx/releases/download/${version}/checksums.txt" \
        "kubens-${version}.sha256") && \
    echo $status && \
    tar -xvzf kubens_${version}_linux_x86_64.tar.gz && \
    install kubens /usr/local/bin/kubens && \
    printf "kubens: %s\n" "$(kubens --version)" >> /.versions

# # TODO: why doesn't standar istio install work?
# RUN version=$(./gh-get-version.sh "${ISTIO_VERSION}" "latest" "istio/istio" | sed s/^v//g) && \
#     { curl -L https://istio.io/downloadIstio ISTIO_VERSION=$ISTIO_VERSION TARGET_ARCH=x86_64 | sh -; } && \
#     install istio-${version}/bin/istioctl /usr/local/bin/istioctl && \
#     cp istio-${version}/tools/istioctl.bash $HOME/.istioctl.bash && \
#     printf "istio: %s\n" "$(istioctl version --remote=false --short)" >> /.versions

RUN version=$(./gh-get-version.sh "${ISTIO_VERSION}" "latest" "istio/istio" | sed s/^v//g) && \
    status=$(./verify-checksum-method1.sh \
        "https://github.com/istio/istio/releases/download/${version}/istio-${version}-linux-amd64.tar.gz" \
        "istio-${version}-linux-amd64.tar.gz" \
        "https://github.com/istio/istio/releases/download/${version}/istio-${version}-linux-amd64.tar.gz.sha256" \
        "istio-${version}-linux-amd64.tar.gz.sha256") && \
    echo $status && \
    tar -xvzf istio-${version}-linux-amd64.tar.gz && \
    install istio-${version}/bin/istioctl /usr/local/bin/istioctl && \
    cp istio-${version}/tools/istioctl.bash $HOME/.istioctl.bash && \
    printf "istio: %s\n" "$(istioctl version --remote=false --short)" >> /.versions

RUN version=$(./gh-get-version.sh "${HASHICORP_VAULT_VERSION}" "latest" "hashicorp/vault" | sed s/^v//g) && \
    status=$(./verify-checksum-method1.sh \
        "https://releases.hashicorp.com/vault/${version}/vault_${version}_linux_amd64.zip" \
        "vault_${version}_linux_amd64.zip" \
        "https://releases.hashicorp.com/vault/${version}/vault_${version}_SHA256SUMS" \
        "vault_${version}_SHA256SUMS") && \
    echo $status && \
    unzip -o "vault_${version}_linux_amd64.zip" && \
    install vault /usr/local/bin/vault && \
    printf "Hashicorp %s\n" "$(vault --version | awk '{print $1" "$2}')" >> /.versions

RUN [ "${TERRAFORM_VERSION:-latest}" = "latest" ] && \
        version=$(curl -s https://checkpoint-api.hashicorp.com/v1/check/terraform | jq -r -M '.current_version') || \
        version="$(echo ${TERRAFORM_VERSION} | sed s/^v//g)" && \
    status=$(./verify-checksum-method1.sh \
        "https://releases.hashicorp.com/terraform/${version}/terraform_${version}_linux_amd64.zip" \
        "terraform_${version}_linux_amd64.zip" \
        "https://releases.hashicorp.com/terraform/${version}/terraform_${version}_SHA256SUMS" \
        "terraform_${version}_SHA256SUMS") && \
    echo $status && \
    unzip -o "terraform_${version}_linux_amd64.zip" && \
    install terraform /usr/local/bin/terraform && \
    printf "Hashicorp %s\n" "$(echo $(terraform version) | awk '{print $1" "$2}')" >> /.versions && \
    terraform -install-autocomplete

RUN version=$(./gh-get-version.sh "${TERRAGRUNT_VERSION}" "latest" "gruntwork-io/terragrunt") && \
    status=$(./verify-checksum-method1.sh \
        "https://github.com/gruntwork-io/terragrunt/releases/download/${version}/terragrunt_linux_amd64" \
        "terragrunt_linux_amd64" \
        "https://github.com/gruntwork-io/terragrunt/releases/download/${version}/SHA256SUMS" \
        "terragrunt_${version}_SHA256SUMS") && \
    echo $status && \
    install terragrunt_linux_amd64 /usr/local/bin/terragrunt && \
    terragrunt --version >> /.versions

RUN version=$(./gh-get-version.sh "${K9S_VERSION}" "latest" "derailed/k9s") && \
    status=$(./verify-checksum-method1.sh \
        "https://github.com/derailed/k9s/releases/download/${version}/k9s_Linux_amd64.tar.gz" \
        "k9s_Linux_amd64.tar.gz" \
        "https://github.com/derailed/k9s/releases/download/${version}/checksums.txt" \
        "k9s-${version}-checksums.txt") && \
    echo $status && \
    tar -xvzf k9s_Linux_amd64.tar.gz k9s -C . && \
    install k9s /usr/local/bin/k9s && \
    k9s version

# TODO
# Download and configure gh client, so the github api can be leveraged.
# (https://docs.github.com/en/rest/git/tags?apiVersion=2022-11-28#get-a-tag)
RUN KUBE_PS1_VERSION="v$(echo ${KUBE_PS1_VERSION} | sed s/^v//g)" && \
    status_code=$(curl -sLI -o /dev/null -w "%{http_code}" "https://github.com/jonmosco/kube-ps1/archive/refs/tags/${KUBE_PS1_VERSION}.zip") && \
    [ $status_code -eq 200 ] && \
    curl -LO "https://github.com/jonmosco/kube-ps1/archive/refs/tags/${KUBE_PS1_VERSION}.zip" && \
    unzip_result="$(unzip -o ${KUBE_PS1_VERSION}.zip)" && \
    echo $unzip_result | grep -q -i creating && \
    unzip_dir="$(echo $unzip_result | awk '{print $5}' | tr -d '/')" && \
    grep -q -E -i "^(\[\[?.+DEBUG.*\])(.+)(set -x)$" "${unzip_dir}/kube-ps1.sh" && \
    sed -E -i "0,/^\[\[?.+DEBUG.*\].+set -x$/s/^(\[\[?.+DEBUG.*\])(.+)(set -x)$/#\1\2\3/" "${unzip_dir}/kube-ps1.sh" && \
    printf "Installing '%s' to '%s' ...\n" "${unzip_dir}/kube-ps1.sh" "$HOME/.local/shell_addons.d/kube-ps1.sh" && \
    mv ${unzip_dir}/kube-ps1.sh $HOME/.local/shell_addons.d/

RUN rm -rf /tmp/downloads && \
    echo 'printf "\033[1m%s\033[0m\n" "Welcome to the machine ..."' >> /etc/bash.bashrc && \
    ln -s /usr/share/bash-completion/completions/git ~/.git-completion.bash && \
    echo "complete -C /usr/local/bin/aws_completer aws" >> "${HOME}/.bashrc" && \
    echo ". <(kubectl completion bash)" >> "${HOME}/.bashrc" && \
    echo "[ -e ~/.git-completion.bash ] && . /usr/share/bash-completion/completions/git" >> "${HOME}/.bashrc" && \
    echo "[ -e ~/.istioctl.bash ] && . ~/.istioctl.bash" >> "${HOME}/.bashrc" && \
    echo "[ \$# -eq 0 ] && /usr/local/bin/init.sh" > $HOME/.local/init.sh && \
    cat >> "${HOME}/.bashrc" <<EOF

export PATH="${HOME}/.local/bin:\${PATH}"
export EDITOR="${EDITOR}"
export VISUAL="${EDITOR}"
export GIT_EDITOR="${EDITOR}"
export KUBE_EDITOR="${EDITOR}"
export CLUSTER_PREFIX="${CLUSTER_PREFIX:-di}"

if [ -d $HOME/.local/shell_addons.d ]; then
    for f in \$(find $HOME/.local/shell_addons.d -mindepth 1 -type f -name '*.sh' | sort -u); do
        . "\${f}"
    done
fi

if [ -d $HOME/.local/profile.d ]; then
    for f in \$(find $HOME/.local/profile.d -mindepth 1 -type f -name '*.sh' | sort -u); do
        . "\${f}"
    done
fi

if [ -f ${HOME}/.local/init.sh ]; then
    . ${HOME}/.local/init.sh
fi

EOF

USER $USER
WORKDIR $HOME

VOLUME [ "/data", "$HOME/.ssh", "$HOME/.gnupg", "$HOME/.password-store", "$HOME/.awsvault" ]

SHELL [ "/bin/bash", "-o", "pipefail", "-c" ]
ENTRYPOINT [ "/usr/local/bin/docker-entrypoint.sh" ]

# Additional Metadata
ARG VERSION=base-latest
ARG IMAGE_BASE_NAME="stairway/cloud-cli-tools"
ARG IMAGE_NAME="stairway/cloud-cli-tools"
ARG IMAGE_VERSION=latest
ARG GIT_COMMIT=
ARG BUILD_DATE=
LABEL org.opencontainers.image.base.name="${IMAGE_BASE_NAME}:${VERSION}"
LABEL org.opencontainers.image.description="docker run <image>:<tag> describe"
LABEL org.opencontainers.image.vendor="stairwaytowonderland"
LABEL org.opencontainers.image.title="Cloud CLI Tools"
LABEL org.opencontainers.image.created-date="${BUILD_DATE}"
LABEL org.opencontainers.image.documentation="https://github.com/${IMAGE_NAME}/tree/main/docker#readme"
LABEL org.opencontainers.image.url="https://github.com/${IMAGE_NAME}"
LABEL org.opencontainers.image.source="https://github.com/${IMAGE_NAME}/blob/main/docker/dockerfiles/Dockerfile.main"
LABEL org.opencontainers.image.version="${IMAGE_VERSION}"
LABEL org.opencontainers.image.revision="${GIT_COMMIT}"
