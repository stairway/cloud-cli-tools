# syntax=docker/dockerfile:1
ARG VERSION=latest
FROM --platform=linux/amd64 ubuntu:$VERSION
LABEL org.opencontainers.image.authors="Andrew Haller <andrew.haller@liatrio.com>"

ARG GH_CLIENT_TOKEN=

ARG AWS_VAULT_VERSION=v6.6.2
ARG MINIKUBE_VERSION=latest
ARG AWS_PYTHON_LAMBDA_RUNTIME_VERSION=3.9

ARG TZ=America/Chicago
ARG EDITOR=nano

# default values
ARG UNAME=root
ARG HOMEDIR=/root
ARG DOTLOCAL=/opt/.local

ENV DOTLOCAL=${DOTLOCAL:-$HOMEDIR/.local}
ENV DOWNLOADS=${DOTLOCAL}/downloads
ENV SCRIPTS=${DOTLOCAL}/scripts

ENV TZ=${TZ}
ENV TERM=xterm-color
ENV EDITOR=${EDITOR}
ENV AWS_VAULT_BACKEND=pass

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

RUN apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y apt-utils && \
    apt-get clean -y

ARG INSTALL_PKGS="\
    coreutils \
    bash-completion \
    curl \
    wget \
    # this is v1 version of aws-cli ... v2 downloaded with curl, below
    # awscli \
    openssl \
    nano \
    vim \
    jq \
    zip \
    locales \
    tzdata \
    pass \
    gpg \
    lsb-release \
    python3-pip \
    python3-venv \
    npm \
    sudo"

COPY bin/gh-login /usr/local/bin/

# Install packages
RUN apt-get update -y && \
    export TZ_COUNTRY=$(echo "$TZ" | awk -F'/' '{print $1}') && \
    export TZ_CITY=$(echo "$TZ" | awk -F'/' '{print $2}') && \
    echo "tzdata tzdata/Areas select $TZ_COUNTRY" | debconf-set-selections && \
    echo "tzdata tzdata/Zones/$TZ_COUNTRY select $TZ_CITY" | debconf-set-selections && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y $INSTALL_PKGS && \
    apt-get clean -y && \
    pip3 install --upgrade pip && \
    sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \
    touch /usr/share/locale/locale.alias && \
    locale-gen && \
    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && \
    . /etc/os-release && echo "${NAME} ${VERSION}" >> /.versions

RUN cat >> /etc/skel/.bashrc <<EOF
if [ -f \$DOTLOCAL/.bashrc_extra ]; then
    . \$DOTLOCAL/.bashrc_extra
fi
EOF

# TODO: gpg not currently working with non-root user
# (alternative to `--groups sudu` is `echo "$UNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers`)
# (to add password, use `-p "$(openssl passwd -1 <password>)"`)
RUN useradd --create-home --shell /bin/bash --user-group --groups sudo --no-log-init $UNAME && \
    passwd -d $UNAME && \
    echo "root:root" | chpasswd && \
    useradd --system --create-home --user-group --no-log-init localstack && \
    passwd -d localstack && \
    [ -d $DOTLOCAL ] || mkdir -p $DOTLOCAL && \
    mkdir -p $DOWNLOADS && \
    mkdir -p $SCRIPTS && \
    chown -R $UNAME $DOTLOCAL

# Pip install for default python version
USER localstack
RUN echo $HOME
RUN ls -la $HOME
RUN HOME=/home/localstack python3 -m pip install --user localstack
USER $UNAME
RUN HOME=$HOMEDIR sudo pip3 install --user pre-commit pytest debugpy
USER root

# Install additional python versions
RUN export PYTHON_DEFAULT_VERSION=$(python3 --version | awk '{print $2}' | awk -F'.' '{print $1"."$2}') && \
    [ "${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}" != "${PYTHON_DEFAULT_VERSION}" ] && \
        apt-get update -y && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y software-properties-common && \
        add-apt-repository -y ppa:deadsnakes/ppa && \
        apt-get update -y && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y "python${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}" "python${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}-distutils" && \
        update-alternatives --install /usr/bin/python3 python3 "/usr/bin/python${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}" 1 && \
        update-alternatives --install /usr/bin/python3 python3 "/usr/bin/python${PYTHON_DEFAULT_VERSION}" 2 && \
        update-alternatives --set python3 $(update-alternatives --list python3 | grep "python${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}") && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y python-is-python3 && \
        apt-get clean -y

# Pip (and poetry) install for override python version
USER localstack
RUN HOME=/home/localstack python3 -m pip install --user localstack
USER $UNAME
RUN HOME=$HOMEDIR sudo pip3 install --user pre-commit pytest debugpy
RUN curl -sSL https://install.python-poetry.org | POETRY_HOME="${DOTLOCAL}" python3 -
USER root

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# Install Docker
# https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
ARG DOCKER_PKGS="\
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-buildx-plugin \
    docker-compose-plugin"

WORKDIR $DOWNLOADS

RUN touch $SCRIPTS/add-bash-extra.sh && \
    chmod +x $SCRIPTS/add-bash-extra.sh && \
    cat > $SCRIPTS/add-bash-extra.sh <<EOF
#!/bin/sh -euf
cat >> \$1 <<BASHEXTRA
if [ -f \$DOTLOCAL/.bashrc_extra ]; then
    . \$DOTLOCAL/.bashrc_extra
fi
BASHEXTRA
EOF

RUN touch $SCRIPTS/str-lower.sh && \
    chmod +x $SCRIPTS/str-lower.sh && \
    cat > $SCRIPTS/str-lower.sh <<EOF
#!/bin/sh -euf
echo "\$@" | tr '[:upper:]' '[:lower:]'
EOF

RUN touch $SCRIPTS/get-arch.sh && \
    chmod +x $SCRIPTS/get-arch.sh && \
    cat > $SCRIPTS/get-arch.sh <<EOF
#!/bin/sh -euf
uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/'
EOF

RUN touch $SCRIPTS/get-os.sh && \
    chmod +x $SCRIPTS/get-os.sh && \
    cat > $SCRIPTS/get-os.sh <<EOF
#!/bin/sh -euf
uname -s
EOF

RUN touch $SCRIPTS/get-platform.sh && \
    chmod +x $SCRIPTS/get-platform.sh && \
    cat > $SCRIPTS/get-platform.sh <<EOF
#!/bin/sh -euf
os=\$($SCRIPTS/get-os.sh)
arch=\$($SCRIPTS/get-arch.sh)
echo "\${os}_\${arch}"
EOF

RUN touch $SCRIPTS/gh-auth-status.sh && \
    chmod +x $SCRIPTS/gh-auth-status.sh && \
    cat > $SCRIPTS/gh-auth-status.sh <<EOF
#!/bin/sh -euf
gh_auth_status() {
    gh auth status 2>/dev/null || { [ -n "\${GH_CLIENT_TOKEN:-""}" ] && /usr/local/bin/gh-login >/dev/null 2>&1; }
    return \$?
}
gh_auth_status
exit \$?
EOF

RUN touch $SCRIPTS/gh-get-latest-release.sh && \
    chmod +x $SCRIPTS/gh-get-latest-release.sh && \
    cat > $SCRIPTS/gh-get-latest-release.sh <<EOF
#!/bin/sh -euf
# https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limiting
gh_curl_latest_release() {
    curl --silent "https://api.github.com/repos/\${1}/releases/latest" | \
grep '\"tag_name\":' | \
sed -E 's/.*\"([^\"]+)\".*/\1/'
}
gh_client_latest_release() {
    $SCRIPTS/gh-auth-status.sh && gh api "repos/\${1}/releases/latest" --jq '.tag_name' 2>/dev/null
    return \$?
}
gh_client_latest_release "\$@" || \
gh_curl_latest_release "\$@"
exit \$?
EOF

RUN touch $SCRIPTS/gh-get-version.sh && \
    chmod +x $SCRIPTS/gh-get-version.sh && \
    cat > $SCRIPTS/gh-get-version.sh <<EOF
#!/bin/sh -euf
gh_get_version() {
    local return_code=$?
    local version
    [ "\${1:-\$2}" = "\$2" ] && \
version=\$($SCRIPTS/gh-get-latest-release.sh "\$3") || \
version="v\$(echo \$1 | sed s/^v//g)"
    return_code=\$?
    echo "\$version"
    return \$return_code
}
gh_get_version "\$@"
exit \$?
EOF

RUN touch $SCRIPTS/gh-download-release-asset.sh && \
    chmod +x $SCRIPTS/gh-download-release-asset.sh && \
    cat > $SCRIPTS/gh-download-release-asset.sh <<EOF
#!/bin/sh -euf
gh_download_release_asset() {
    $SCRIPTS/gh-auth-status.sh && gh release --repo "\${1}" download "\${2}" -p "\${3}" 2>/dev/null
    return \$?
}
gh_download_release_asset "\$@"
exit \$?
EOF

RUN touch $SCRIPTS/gh-download-and-verify.sh && \
    chmod +x $SCRIPTS/gh-download-and-verify.sh && \
    cat > $SCRIPTS/gh-download-and-verify.sh <<EOF
#!/bin/sh -euf
asset_name="\${3}"
asset_dir_rel="\${1}/\${2}/\$(echo \${3} | awk -F'.' '{print \$1}')"
mkdir -p "${DOWNLOADS}/\${asset_dir_rel}"
cd "${DOWNLOADS}/\${asset_dir_rel}"
gh_client_download_verify() {
    local return_code=\$?
    local status=
    $SCRIPTS/gh-download-release-asset.sh "\${1}" "\${2}" "\${3}" && \
$SCRIPTS/gh-download-release-asset.sh "\${1}" "\${2}" "\${4}" && \
status=\$(cat \${4} | grep --color=never \${3} | sha256sum -c -)
    return_code=\$?
    if [ \$return_code -eq 0 -a "\$status" = "\${3}: OK" ]; then
        printf "\033[92;1m%s\033[0m\n" "\$status"
    else
        printf "\033[91;1m%s\033[0m\n" "\$status" >&2
        return \$return_code
    fi
}
gh_curl_download_verify() {
    local return_code=\$?
    local status=
    curl -LO "https://github.com/\${1}/releases/download/\${2}/\${3}" && \
curl -LO "https://github.com/\${1}/releases/download/\${2}/\${4}" && \
status=\$(cat \${4} | grep --color=never \${3} | sha256sum -c -)
    return_code=\$?
    if [ \$return_code -eq 0 -a "\$status" = "\${3}: OK" ]; then
        printf "\033[92;1m%s\033[0m\n" "\$status"
    else
        printf "\033[91;1m%s\033[0m\n" "\$status" >&2
        return \$return_code
    fi
}
gh_client_download_verify "\$@" || \
gh_curl_download_verify "\$@"
exit_code=\$?
[ \$exit_code -eq 0 ] && cp "${DOWNLOADS}/\${asset_dir_rel}/\${asset_name}" $DOWNLOADS/ >/dev/null
exit \$exit_code
EOF

RUN touch $SCRIPTS/download-and-verify-1.sh && \
    chmod +x $SCRIPTS/download-and-verify-1.sh && \
    cat > $SCRIPTS/download-and-verify-1.sh <<EOF
#!/bin/sh -euf
asset_name="\${4}"
asset_dir_rel="\${2}/\${3}/\$(echo \${4} | awk -F'.' '{print \$1}')"
mkdir -p "${DOWNLOADS}/\${asset_dir_rel}"
cd "${DOWNLOADS}/\${asset_dir_rel}"
download_verify_1() {
    local return_code=\$?
    local status=
    local asset_base="\${1}/\${3}"
    local asset_uri=
    local checksum_uri=
    if [ -n "\${6:-""}" ]; then
        asset_uri="\${asset_base}/\${6}/\${4}"
        checksum_uri="\${asset_base}/\${6}/\${5}"
    else
        asset_uri="\${asset_base}/\${4}"
        checksum_uri="\${asset_base}/\${5}"
    fi
    curl -LO "\${asset_uri}" && \
curl -LO "\${checksum_uri}" && \
status=\$(cat \${5} | grep --color=never \${4} | sha256sum -c -)
    return_code=\$?
    if [ \$return_code -eq 0 -a "\$status" = "\${4}: OK" ]; then
        printf "\033[92;1m%s\033[0m\n" "\$status"
    else
        printf "\033[91;1m%s\033[0m\n" "\$status"
        return \$return_code
    fi
}
download_verify_1 "\$@"
exit_code=\$?
[ \$exit_code -eq 0 ] && cp "${DOWNLOADS}/\${asset_dir_rel}/\${asset_name}" $DOWNLOADS/ >/dev/null
exit \$exit_code
EOF

RUN touch $SCRIPTS/download-and-verify-2.sh && \
    chmod +x $SCRIPTS/download-and-verify-2.sh && \
    cat > $SCRIPTS/download-and-verify-2.sh <<EOF
#!/bin/sh -euf
asset_name="\${4}"
asset_dir_rel="\${2}/\${3}/\$(echo \${4} | awk -F'.' '{print \$1}')"
mkdir -p "${DOWNLOADS}/\${asset_dir_rel}"
cd "${DOWNLOADS}/\${asset_dir_rel}"
download_verify_2() {
    local return_code=\$?
    local status=
    local asset_base="\${1}/\${3}"
    local asset_uri=
    local checksum_uri=
    if [ -n "\${6:-""}" ]; then
        asset_uri="\${asset_base}/\${6}/\${4}"
        checksum_uri="\${asset_base}/\${6}/\${5}"
    else
        asset_uri="\${asset_base}/\${4}"
        checksum_uri="\${asset_base}/\${5}"
    fi
    curl -LO "\${asset_uri}" && \
curl -LO "\${checksum_uri}" && \
status=\$(echo "\$(cat \${5})  \${4}" | sha256sum --check)
    return_code=\$?
    if [ \$return_code -eq 0 -a "\$status" = "\${4}: OK" ]; then
        printf "\033[92;1m%s\033[0m\n" "\$status"
    else
        printf "\033[91;1m%s\033[0m\n" "\$status"
        return \$return_code
    fi
}
download_verify_2 "\$@"
exit_code=\$?
[ \$exit_code -eq 0 ] && cp "${DOWNLOADS}/\${asset_dir_rel}/\${asset_name}" $DOWNLOADS/ >/dev/null
exit \$exit_code
EOF

RUN mkdir -m 0755 -p /etc/apt/keyrings && \
    git --version >> /.versions && \
    $SCRIPTS/add-bash-extra.sh /root/.bashrc

RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /etc/apt/keyrings/githubcli-archive-keyring.gpg && \
    chmod a+r /etc/apt/keyrings/githubcli-archive-keyring.gpg && \
    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages \
        stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
    apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt install -y gh && \
    apt-get clean -y && \
    gh --version >> /.versions

RUN curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    chmod a+r /etc/apt/keyrings/docker.gpg && \
    echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y $DOCKER_PKGS && \
    apt-get clean -y && \
    docker --version >> /.versions

RUN version=$($SCRIPTS/gh-get-version.sh "${DOCKER_COMPOSE_VERSION}" "latest" "docker/compose") && \
    status=$($SCRIPTS/gh-download-and-verify.sh "docker/compose" "${version}" \
        "docker-compose-linux-x86_64" "docker-compose-linux-x86_64.sha256") && \
    echo $status && \
    install docker-compose-linux-x86_64 /usr/local/bin/docker-compose && \
    docker-compose --version >> /.versions

# https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
# *note* --install-dir /usr/local/aws-cli --update as a precaution in case awscli v1 (see above) has already been installed
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" && \
    unzip -o awscliv2.zip && \
    update_in_case_v1_installed() { [ -f /bin/aws ] && \
        printf "\033[93;1m[WARNING] aws cli version 1 has been detected\033[0m\n" && \
        ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update || \
        ./aws/install; } && update_in_case_v1_installed && \
    aws --version >> /.versions

RUN version=$($SCRIPTS/gh-get-version.sh "${EKSCTL_VERSION}" "latest" "weaveworks/eksctl") && \
    platform=$($SCRIPTS/get-platform.sh) && \
    status=$($SCRIPTS/gh-download-and-verify.sh "weaveworks/eksctl" "${version}" \
        "eksctl_${platform}.tar.gz" "eksctl_checksums.txt") && \
    echo $status && \
    tar -xzf eksctl_${platform}.tar.gz -C ./ && rm eksctl_${platform}.tar.gz && \
    install eksctl /usr/local/bin/eksctl && \
    printf "eksctl: %s\n" "$(eksctl version 2>&1)" >> /.versions

RUN version=$($SCRIPTS/gh-get-version.sh "${AWS_VAULT_VERSION}" "latest" "99designs/aws-vault") && \
    status=$($SCRIPTS/gh-download-and-verify.sh "99designs/aws-vault" "${version}" \
        "aws-vault-linux-amd64" "SHA256SUMS") && \
    echo $status && \
    install aws-vault-linux-amd64 /usr/local/bin/aws-vault && \
    printf "aws-vault: %s\n" "$(aws-vault --version 2>&1)" >> /.versions

USER $UNAME
RUN version=$($SCRIPTS/gh-get-version.sh "${MINIKUBE_VERSION}" "latest" "kubernetes/minikube") && \
    status=$($SCRIPTS/download-and-verify-2.sh "https://storage.googleapis.com/minikube/releases" \
        "kubernetes/minikube" "${version}" \
        "minikube-linux-amd64" "minikube-linux-amd64.sha256") && \
    echo $status && \
    install minikube-linux-amd64 /usr/local/bin/minikube && \
    printf "minikube: %s\n" "$(minikube version --short)" >> /.versions

RUN set -x; printf "HOME=%s" "$HOME"
USER root
WORKDIR $HOMEDIR

# Additional Metadata
ARG VERSION=latest
LABEL org.opencontainers.image.base.name="ubuntu:$VERSION"
LABEL org.opencontainers.image.title="Cloud CLI Tools - Base Image"
LABEL org.opencontainers.image.documentation="https://github.com/${GITHUB_REPO}/tree/main/docker#readme"
LABEL org.opencontainers.image.url="https://github.com/${GITHUB_REPO}"
LABEL org.opencontainers.image.source="https://github.com/${GITHUB_REPO}/blob/main/docker/dockerfiles/Dockerfile.base"
