# syntax=docker/dockerfile:1
ARG VERSION=latest
FROM --platform=linux/amd64 ubuntu:$VERSION
LABEL org.opencontainers.image.authors="Andrew Haller <andrew.haller@liatrio.com>"

ARG TZ=America/Chicago \
    EDITOR=nano \
    AWS_VAULT_VERSION=v6.6.2 \
    HASHICORP_VAULT_VERSION=latest \
    MINIKUBE_VERSION=latest \
    AWS_PYTHON_LAMBDA_RUNTIME_VERSION=3.9 \
    ADDITIONAL_PYTHON_VERSIONS="3.11" \
    # default values
    SHARED=/opt \
    DOTLOCAL=/opt/local \
    GH_CLIENT_TOKEN=

ENV DOWNLOADS=${DOTLOCAL}/downloads \
    SCRIPTS=${DOTLOCAL}/scripts \
    BASHRC_EXTRA="${DOTLOCAL}/bashrc.extra" \
    DOTLOCAL=${DOTLOCAL} \
    SHARED=${SHARED} \
    TZ=${TZ} \
    TERM=xterm \
    EDITOR=${EDITOR} \
    AWS_VAULT_BACKEND=pass

# We want a "standard Ubuntu"
# (ie: not one that has been minimized
# by removing packages and content
# not required in a production system)
RUN yes | unminimize

# Pre-install
RUN apt-get --assume-yes --quiet update && \
    DEBIAN_FRONTEND=noninteractive apt-get --assume-yes --quiet install apt-utils && \
    rm --recursive --force /var/lib/apt/lists/* && \
    mkdir -p $DOTLOCAL/bin $DOWNLOADS $SCRIPTS && \
    # check: `pip config list -v`
    # test:  `pip cache dir`
    cat >> /etc/pip.conf <<EOF

[global]
cache-dir=$SHARED/.cache
EOF

ARG INSTALL_PKGS="\
    coreutils \
    apt-transport-https \
    build-essential \
    bash-completion \
    ca-certificates \
    curl \
    git \
    wget \
    # this is v1 version of aws-cli ... v2 downloaded with curl, below
    # awscli \
    openssl \
    man-db \
    manpages-posix \
    nano \
    vim \
    jq \
    # TODO: Install from Github: https://github.com/mikefarah/yq
    # yq \
    miller \
    gojq \
    zip \
    locales \
    lsb-release \
    tzdata \
    pass \
    gpg \
    lsb-release \
    python3-pip \
    python3-venv \
    npm \
    sudo \
    telnet \
    iputils-ping" \
    #
    PIP_PKGS="\
    pre-commit \
    pytest \
    debugpy" \
    #
    DOCKER_PKGS="\
    docker-ce \
    docker-ce-cli \
    containerd.io \
    docker-buildx-plugin \
    docker-compose-plugin"

COPY bin/gh-login bin/install-base-* $DOTLOCAL/bin/

ONBUILD COPY bin/* $DOTLOCAL/bin/
ONBUILD COPY profile/* $DOTLOCAL/profile.d/
ONBUILD COPY conf $DOTLOCAL/conf

# Install packages
# RUN INSTALL_PKGS=$INSTALL_PKGS \
#     PIP_PKGS=$PIP_PKGS \
#     $DOTLOCAL/bin/install-base-pkgs.sh

RUN \
    apt-get --assume-yes --quiet update && \
    export TZ_COUNTRY=$(echo "$TZ" | awk -F'/' '{print $1}') && \
    export TZ_CITY=$(echo "$TZ" | awk -F'/' '{print $2}') && \
    echo "tzdata tzdata/Areas select $TZ_COUNTRY" | debconf-set-selections && \
    echo "tzdata tzdata/Zones/$TZ_COUNTRY select $TZ_CITY" | debconf-set-selections

RUN DEBIAN_FRONTEND=noninteractive apt-get --assume-yes --quiet install $INSTALL_PKGS
RUN rm --recursive --force /var/lib/apt/lists/*
RUN pip3 install --upgrade pip --no-cache-dir
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen
RUN touch /usr/share/locale/locale.alias
RUN locale-gen
RUN localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
RUN . /etc/os-release && echo "${NAME} ${VERSION}" >> /.versions

RUN \
    cat >> /etc/skel/.bashrc <<EOF

if [ -f "\${BASHRC_EXTRA:-$BASHRC_EXTRA}" ]; then
    . "\${BASHRC_EXTRA:-$BASHRC_EXTRA}"
fi

EOF

# Install additional python versions
# PIP_CACHE_DIR=$DOTLOCAL python${python_version} -m pip install $PIP_PKGS
RUN \
    export PYTHON_DEFAULT_VERSION=$(python3 --version | awk '{print $2}' | awk -F'.' '{print $1"."$2}') && \
    apt-get --assume-yes --quiet update && \
    DEBIAN_FRONTEND=noninteractive apt-get --assume-yes --quiet install software-properties-common && \
    add-apt-repository -y 'ppa:deadsnakes/ppa' && \
    { [ "${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}" != "${PYTHON_DEFAULT_VERSION}" ] && \
        DEBIAN_FRONTEND=noninteractive apt-get --assume-yes --quiet install "python${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}" "python${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}-distutils" && \
        update-alternatives --install /usr/bin/python3 python3 "/usr/bin/python${PYTHON_DEFAULT_VERSION}" 99 && \
        update-alternatives --install /usr/bin/python3 python3 "/usr/bin/python${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}" 98 && \
        update-alternatives --set python3 $(update-alternatives --list python3 | grep "python${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}") && \
        python${AWS_PYTHON_LAMBDA_RUNTIME_VERSION} -m pip install $PIP_PKGS --no-cache-dir; } && \
    python${PYTHON_DEFAULT_VERSION} -m pip install $PIP_PKGS --no-cache-dir && \
    priority=0 && \
    { for python_version in $(echo $ADDITIONAL_PYTHON_VERSIONS); do \
        [ "${python_version}" != "${PYTHON_DEFAULT_VERSION}" -a "${python_version}" != "${AWS_PYTHON_LAMBDA_RUNTIME_VERSION}" ] && \
            priority=$((priority+1)) && \
            DEBIAN_FRONTEND=noninteractive apt-get --assume-yes --quiet install "python${python_version}" "python${python_version}-distutils" && \
            update-alternatives --install /usr/bin/python3 python3 "/usr/bin/python${python_version}" $priority && \
            python${python_version} -m pip install $PIP_PKGS --no-cache-dir; \
    done; } && \
    DEBIAN_FRONTEND=noninteractive apt-get --assume-yes --quiet install python-is-python3 && \
    rm --recursive --force /var/lib/apt/lists/* && \
    pip cache purge

ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8

WORKDIR $DOWNLOADS

RUN useradd -m -s /bin/bash linuxbrew && \
	echo 'linuxbrew ALL=(ALL) NOPASSWD:ALL' >>/etc/sudoers && \
    git config --global --add safe.directory /home/linuxbrew/.linuxbrew/Homebrew && \
    cat >> /etc/skel/.profile <<EOF
git config --global --add safe.directory /home/linuxbrew/.linuxbrew/Homebrew

EOF
USER linuxbrew
RUN NONINTERACTIVE=1 bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" && \
    cd /home/linuxbrew/.linuxbrew/Homebrew && \
    git remote set-url origin https://github.com/Homebrew/brew
USER root
ENV PATH="/home/linuxbrew/.linuxbrew/bin:${PATH}"

# Install additional
RUN AWS_VAULT_VERSION=$AWS_VAULT_VERSION \
    HASHICORP_VAULT_VERSION=$HASHICORP_VAULT_VERSION \
    MINIKUBE_VERSION=$MINIKUBE_VERSION \
    AWS_PYTHON_LAMBDA_RUNTIME_VERSION=$AWS_PYTHON_LAMBDA_RUNTIME_VERSION \
    ADDITIONAL_PYTHON_VERSIONS=$ADDITIONAL_PYTHON_VERSIONS \
    $DOTLOCAL/bin/install-base-addtl.sh

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
WORKDIR /root

# Additional Metadata
ARG VERSION=latest
LABEL org.opencontainers.image.base.name="ubuntu:$VERSION" \
      org.opencontainers.image.title="Cloud CLI Tools - Base Image" \
      org.opencontainers.image.documentation="https://github.com/${GITHUB_REPO}/tree/main/docker#readme" \
      org.opencontainers.image.url="https://github.com/${GITHUB_REPO}" \
      org.opencontainers.image.source="https://github.com/${GITHUB_REPO}/blob/main/docker/dockerfiles/Dockerfile.base"
